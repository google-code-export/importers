# XXX Do not make stand-alone; simply integrate into file importer impl.
class PathCache:

    """Caches path existence checks for other classes implementing
    file_exists().

    This can be useful for mitigating stat calls (or the equivalent) when they
    are expensive at the cost of dynamicism for the importer. The class allows
    for controlling whether successful and/or unsuccessful path checks should
    be cached. If Python code will be added and removed to the store the
    importer is working with then caching should be turned off to allow the
    importer to pick up on new code. If only new code will be added to the
    store (e.g. no new source but new bytecode is a possibility),
    then only caching successful file checks is desired. But if the importer is
    interacting with a read-only store then both successes and failures should
    be cached.

    By default the class caches successes and only caches failures if
    sys.dont_write_bytecode is true. This should give the best performance for
    expected semantics of an append-only store (e.g. no new source but new
    bytecode is possible).

    """

    def __init__(*args, cache_success=True,
                    cache_failure=sys.dont_write_bytecode, **kwargs):
        """Initialize the cache and record what should be cached."""
        super().__init__(*args, **kwargs)
        self.__cache_hits = hits
        self.__cache_misses = misses
        self.clear()

    def clear(self):
        """Clear the cache."""
        self.__path_cache = {}

    def file_exists(self, path):
        """Try to return the result from cache, else call the super class and
        cache the result (depending on settings)."""
        try:
            return self.__path_cache[path]
        except KeyError:
            exists = super().file_exists(path)
            if exists and self.__cache_hits:
                self.__path_cache[path] = True
            elif not exists and self.__cache_misses:
                self.__path_cache[path] = False

            return exists
